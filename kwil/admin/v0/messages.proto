syntax = "proto3";
package admin;
option go_package = "github.com/kwilteam/kwil-db/core/rpc/protobuf/admin/v0;admpb";

message VersionRequest {}
message VersionResponse {
	string version_string = 1;
	// uint32 major = 2;
	// uint32 minor = 3;
	// uint32 patch = 4;
	// string prerelease = 5;
	// string build_metadata = 6;
}

message StatusRequest {}
message StatusResponse {
	NodeInfo node = 1;
	SyncInfo sync = 2;
	Validator validator = 3;
}

message NodeInfo {
	string chain_id = 1 [json_name = "chain_id"];
	string node_name = 2 [json_name = "node_name"];
	string node_id = 3 [json_name = "node_id"];
	uint64 protocol_version = 4 [json_name = "protocol_version"];
	uint64 app_version = 5 [json_name = "app_version"];
	uint64 block_version = 6 [json_name = "block_version"];
	string listen_addr = 7 [json_name = "listen_addr"];
	string rpc_addr = 8 [json_name = "rpc_addr"];
}

message SyncInfo {
	string app_hash = 1 [json_name = "app_hash"];
	string best_block_hash = 2 [json_name = "best_block_hash"];
	int64 best_block_height = 3 [json_name = "best_block_height"];
	int64 best_block_time = 4 [json_name = "best_block_time"];
	bool syncing = 5;
}

message Validator {
    bytes pubkey = 1; // ED25519 PubKey
    int64 power = 2;
}

message Peer {
	NodeInfo node = 1;
	bool inbound = 2;
	string remote_addr = 3 [json_name = "remote_addr"];
}

message PeersRequest {}
message PeersResponse {
	repeated Peer peers = 1;
}

// the following are all transactions, and therefore return a tx.BroadcastResponse
message ApproveRequest {
	bytes pubkey = 1;
}
message JoinRequest {}
message LeaveRequest {}
message RemoveRequest {
	bytes pubkey = 1;
}

message JoinStatusRequest {
	bytes pubkey = 1;
}
message JoinStatusResponse {
	PendingJoin join_request = 1 [json_name = "join_request"];
}

message PendingJoin {
    bytes candidate = 1; // ED25519 PubKey
	int64 power = 2;
	int64 expires_at = 3 [json_name = "expires_at"];
	repeated bytes board = 4; // all validators
	repeated bool approved = 5; // whether each validator has approved
}

message ListValidatorsRequest {}
message ListValidatorsResponse {
	repeated Validator validators = 1;
}

message ListJoinRequestsRequest {}
message ListJoinRequestsResponse {
	repeated PendingJoin join_requests = 1 [json_name = "join_requests"];
}

message GetConfigRequest {}
message GetConfigResponse {
	bytes config = 1; // due to the size of the config, and how often it is updated, doing this for now
}