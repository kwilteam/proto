syntax = "proto3";
package tx;
option go_package = "github.com/kwilteam/kwil-db/api/protobuf/tx/v1;txpb";

import "kwil/tx/v1/broadcast.proto";
import "kwil/tx/v1/price.proto";
import "kwil/tx/v1/query.proto";
import "kwil/tx/v1/ping.proto";
import "kwil/tx/v1/account.proto";
import "kwil/tx/v1/config.proto";
import "kwil/tx/v1/list.proto";
import "kwil/tx/v1/dataset.proto";
import "kwil/tx/v1/call.proto";
import "google/api/annotations.proto";
import "kwil/tx/v1/validator.proto";
import "kwil/tx/v1/tx_query.proto";

service TxService {
    rpc Broadcast(BroadcastRequest) returns (BroadcastResponse) {
        option (google.api.http) = {
            post: "/api/v1/broadcast",
            body: "*"
        };
    }

    rpc EstimatePrice(EstimatePriceRequest) returns (EstimatePriceResponse) {
        option (google.api.http) = {
            post: "/api/v1/estimate_price",
            body: "*"
        };
    }

    rpc Query(QueryRequest) returns (QueryResponse) {
        option (google.api.http) = {
            post: "/api/v1/query",
            body: "*"
        };
    }

    rpc GetAccount(GetAccountRequest) returns (GetAccountResponse) {
        option (google.api.http) = {
            get: "/api/v1/accounts/{public_key}"
        };
    }

    rpc Ping(PingRequest) returns (PingResponse) {
        option (google.api.http) = {
            get: "/api/v1/ping"
        };
    }

    rpc GetConfig(GetConfigRequest) returns (GetConfigResponse) {
        option (google.api.http) = {
            get: "/api/v1/config"
        };
    }

    rpc ListDatabases(ListDatabasesRequest) returns (ListDatabasesResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/databases"
        };
    }

    rpc GetSchema(GetSchemaRequest) returns (GetSchemaResponse) {
        option (google.api.http) = {
            get: "/api/v1/databases/{dbid}/schema"
        };
    }

    rpc ApproveValidator(ValidatorApprovalRequest) returns (ValidatorApprovalResponse) {
        option (google.api.http) = {
            post: "/api/v1/approve_validator",
            body: "*"
        };
    }

    rpc ValidatorJoin(ValidatorJoinRequest) returns (ValidatorJoinResponse) {
        option (google.api.http) = {
            post: "/api/v1/validator_join",
            body: "*"
        };
    }

    rpc ValidatorLeave(ValidatorLeaveRequest) returns (ValidatorLeaveResponse) {
        option (google.api.http) = {
            post: "/api/v1/validator_leave",
            body: "*"
        };
    }

    rpc ValidatorJoinStatus(ValidatorJoinStatusRequest) returns (ValidatorJoinStatusResponse) {
        option (google.api.http) = {
            get: "/api/v1/validator_join_status"
        };
    }

    rpc Call(CallRequest) returns (CallResponse) {
      option (google.api.http) = {
        post: "/api/v1/call",
        body: "*"
      };
    }

    rpc TxQuery(TxQueryRequest) returns (TxQueryResponse) {
      option (google.api.http) = {
        post: "/api/v1/tx_query",
        body: "*"
      };
    }
}