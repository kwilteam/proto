syntax = "proto3";
package tx;
option go_package = "github.com/kwilteam/kwil-db/core/rpc/protobuf/tx/v1;txpb";

message GetSchemaRequest {
    string dbid = 1;
}

message GetSchemaResponse {
    Schema schema = 1;
}

message Schema {
    bytes owner = 1;
    string name = 2;
    repeated Table tables = 3;
    repeated Action actions = 4;
    repeated Extensions extensions = 5;
    repeated Procedure procedures = 6;
    repeated ForeignProcedure foreign_procedures = 7 [json_name = "foreign_procedures"];
}

message Table {
    string name = 1;
    repeated Column columns = 2;
    repeated Index indexes = 3;
    repeated ForeignKey foreign_keys = 4 [json_name = "foreign_keys"];
}

message Column {
    string name = 1;
    DataType type = 2;
    repeated Attribute attributes = 3;
}

message Attribute {
    string type = 1;
    string value = 2;
}

message Index {
    string name = 1;
    repeated string columns = 2;
    string type = 3;
}

message Action {
    string name = 1;
    bool public = 2;
    repeated string parameters = 3;
    repeated string modifiers = 4;
    string body = 5;
    repeated string annotations = 6;

}

message Extensions {
    message ExtensionConfig {
        string argument = 1;
        string value = 2;
    }
    string name = 1;
    repeated ExtensionConfig initialization = 2;
    string alias = 3;
}

message ForeignKey {
    repeated string child_keys = 1 [json_name = "child_keys"]; 
    repeated string parent_keys = 2 [json_name = "parent_keys"];
    string parent_table = 3 [json_name = "parent_table"];
    repeated ForeignKeyAction actions = 4;
}

message ForeignKeyAction {
    string on = 1;
    string do = 2;
}

message Procedure {
    string name = 1;
    repeated TypedVariable parameters = 2;
    bool public = 3;
    repeated string modifiers = 4;
    string body = 5;
    // either return_types or return_table should be set
    ProcedureReturn return_types = 6 [json_name = "return_types"];
    repeated string annotations = 7;
}

message ProcedureReturn {
    bool is_table = 1 [json_name = "is_table"];
    repeated TypedVariable fields = 2;
}


message TypedVariable {
    string name = 1;
    DataType type = 2;
}

message DataType {
    string name = 1;
    bool is_array = 2 [json_name = "is_array"];
}

message ForeignProcedure {
    string name = 1;
    repeated DataType parameters = 2;
    ProcedureReturn return_types = 3 [json_name = "return_types"];
}